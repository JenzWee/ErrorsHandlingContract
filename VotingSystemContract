// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    address public admin;
    mapping(address => bool) public registeredVoters;
    mapping(address => bool) public hasVoted;
    mapping(address => uint256) public votesReceived;

    event VoterRegistered(address indexed voter);
    event VoteCast(address indexed voter, address candidate);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function registerVoter(address _voter) public onlyAdmin {
        require(!registeredVoters[_voter], "Voter already registered");
        registeredVoters[_voter] = true;
        emit VoterRegistered(_voter);
    }

    function castVote(address _candidate) public {
        require(registeredVoters[msg.sender], "You are not a registered voter");
        require(!hasVoted[msg.sender], "You have already cast your vote");
        require(_candidate != address(0), "Invalid candidate address");

        hasVoted[msg.sender] = true;
        votesReceived[_candidate]++;

        emit VoteCast(msg.sender, _candidate);
    }

    function getVoteCount(address _candidate) public view returns (uint256) {
        return votesReceived[_candidate];
    }

    function requireExample(uint256 _value) public pure returns (uint256) {
        require(_value > 0, "Value must be greater than zero");
        return _value;
    }

    function assertExample(uint256 _value) public pure returns (uint256) {
        uint256 result = _value * 2;
        assert(result >= _value); // Ensure no overflow
        return result;
    }

    function revertExample(uint256 _value) public pure returns (uint256) {
        if (_value == 0) {
            revert("Value cannot be zero");
        }
        return _value;
    }
}
